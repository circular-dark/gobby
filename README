Gobby is a simplified Chubby implemented in Go.

To be precise, Gobby is a reliable distributed key-value store based on Paxos,
and can provide coordination service for distributed applications, including
locks and notifications.

--------------------------------------------------------------------------------
RPC Interface for Gobby
--------------------------------------------------------------------------------

Put(key, value)         ---- assign key-value pair.
Get(key)                ---- get value.
Acquire(key)            ---- acquire the lock on the key (every key can be
                               used as a lock).
Release(key)            ---- release the lock on the key.
Watch(key)              ---- notifies me when the value associated with this
                               key changes.
CheckMaster()           ---- check whether this gobby server is the master.

--------------------------------------------------------------------------------
Structure
--------------------------------------------------------------------------------

README                  ---- this file.
fmt.sh                  ---- format go code.
kill_mac.sh             ---- kill all running nodes for mac OS.
kill_linux.py           ---- kill all running nodes for linux OS.

src/command             ---- command struct definition.
src/config              ---- configuration of servers.
src/gobbyclient         ---- gobby client library.
src/gobbyserver         ---- gobby server implementation.
src/lease               ---- PaxosLease manager.
src/logfile             ---- persistent logger for recovery (not used).
src/paxos               ---- Paxos for replicated command log.
src/rpc                 ---- rpc definitions.

gobby_test/             ---- tests for gobby server and client.
paxos_test/             ---- tests for Paxos on the replicated command log.
lease_test/             ---- tests for PaxosLease for signing master lease.


--------------------------------------------------------------------------------
Test
--------------------------------------------------------------------------------

In each test directory, we offer one run.sh script, which can automatically run
the test. Some test cases might not terminate by themselves, and need to kill them
manually. We offer scripts to kill all running nodes for mac or linux.

gobby_test/
  1s1c                  ---- one gobby server and one client, basic functions.
  3s1c                  ---- three gobby servers and one client.
  3s3c_normal           ---- three gobby servers and three clients. Three clients 
			     want to update a shared variable stored in the gobby
			     storage system, in a atomical way.
  3s3c_delay            ---- three gobby servers and three clients, and the pkg
			     transfered between paxos nodes are randomly delayed.
  3s3c_drop             ---- three gobby servers and three clients, and the pkg 
			     transfered between paxos nodes are randomly dropped.
  5s10c_normal          ---- five gobby servers and ten clients. The task is the
			     same as 3s3c_normal.
  5s10c_drop            ---- the same as the above one, but drop network pkg.

paxos_test/
  X_normal_test         ---- launch X paxos nodes, and each paxos node replicates
			     a number of commands.
  X_pause_test          ---- launch X paxos nodes, and cut off one node's network.
			     Then other nodes try to replicate their own commands.
			     After other nodes have consensus on these commands,
			     let the node re-connect the other nodes and try to
			     replicate a command. The node can learn all commands
			     from other nodes.
  X_pause_test1         ---- launch X paxos nodes, and cut off one node's network.
			     Then other nodes try to replicate their own commands.
			     After other nodes have consensus on these commands,
			     let the node re-connect the other nodes and one other
			     node tries to replicate a command. The node learns
			     (or say catch up) all commands from other nodes.
  X_random_delay_test   ---- almost the same as X_normal_test. The only difference
			     is the network may randomly delay messages.
  X_random_drop_test    ---- almost the same as X_normal_test. The only difference
			     is the network may randomly drop messages.
  X_stress_test         ---- launch X paxos nodes, and each paxos node tries to do
			     replication for a large number of commands.
  5_pause2_test         ---- launch five paxos nodes, and pause two of them. Other
			     three nodes can work correctly and have consensus on
			     several commands. Then we resume the two nodes, and 
			     these two can learn all commands from other nodes.

lease_test/
  X_normal		---- launch X lease nodes, and one of them can be elected
			     as the master. If we kill the master, a new master 
			     will be elected soon, as long as a majority of nodes
			     survive. If we restart some node, it will join the
			     electoin process.
  X_drop                ---- almost the same as X_normal, but may drop messages


--------------------------------------------------------------------------------
System Design
--------------------------------------------------------------------------------
Gobby is consist of two parts, the client side gobby library and the gobby server.

The user of gobby will use gobby client library to communicate with the server.
The client library offers interface just like local functions, but their implement
are all based on RPC calls to the remote server. The client library will try to 
connect each server until it finds the master gobby server, and then it forwards
all users' requests to the master server. If the master server is no longer master,
the library will try to find the new master server automatically.

The gobby server has two main components, the paxos node, the paxos lease node.

The paxos node is responsible to make a consensus on a command log. They run paxos
protocal and use RPC to communicate between each other. Gobby relies on the paxos
node to replicate, serialize and make consensus on commands.

The paxos lease node is responsible to elect a master for gobby. Our code is based 
on the paper "PaxosLease:Diskless Paxos for Leases"[1]. It uses a modified paxos
protocal to elect a global leader, and makes sure that there is at most one leader
at any time. Only the leader/master can response requests from clients. The reason
we do this is to reduce paxos conflicts by serialize commands before doing paxos
instance. At master node, we can serialize commands according to the arriving time.

The gobby server is mainly build upon the above two components. It handles the 
request from client library with a paxos node and a paxos lease node. When master 
receives a request, it translates the request into one command, which can modify
the server's state, and puts the command into a queue. Another go routine fetches 
the command and pass it to paxos node to replicate the command. A pre-registered 
callback function is called from the paxos node to notify the gobby server, when
the command is successfully replicated. The gobby server can excute the command
on itself(or its inner data structure) as long as there is no gap in the log.
The consistency, correctness and no gap is guarantee by the paxos protocal runned
by the paxos node. After the command has been excuted, the server will generate
return message to the caller.

[1] Trencseni, Marton, Attila Gazso, and Holger Reinhardt. "PaxosLease: Diskless 
Paxos for Leases." arXiv preprint arXiv:1209.4187 (2012).
